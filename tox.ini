[tox]
envlist =
    py{36,37},
    docs,
    linters,
    packaging,
    migrations
skip_missing_interpreters = true
minversion = 3.5.0
isolated_build = true

# Configure special Tox environment used for isolated building of the source
# package.
[testenv:.package]
# Use the default Python 3 version available on the system.
# NOTE: This makes it portable to CI systems where only one particular Python 3
# version is installed.
basepython = python3

[testenv]
basepython =
    py36: python3.6
    # Ensure all other environments use the latest supported Python version.
    !py36: python3.7
extras =
    docs: docs
    !docs: test
setenv =
    # Enable pytest to find Django's setting module.
    py{36,37}: PYTHONPATH=.
passenv =
    # Pass environment variables controlling project's tests.
    py36,migrations: STRAINING_* DJANGO_TEST_PROCESSES TRAVIS LC_*
whitelist_externals =
    migrations: bash
    migrations: psql
ignore_errors =
    !linters: false
    # Run all linters to see their output even if one of them fails.
    linters: true

commands_pre =
    # Verify installed packages have compatible dependencies.
    # NOTE: Running 'pip check' after installation is necessary since pip
    # currently lacks dependency resolution which means it can silently create
    # broken installations.
    # For more details, see: https://github.com/pypa/pip/issues/988.
    pip check

commands =
    # General tests commands:
    # Run tests.
    py{36,37}: coverage run tests/manage.py test {env:TEST_SUITE:straining} \
    py{36,37}:     --noinput --verbosity=2 --parallel
    py{36,37}: coverage combine

    # Docs commands:
    # Build documentation.
    docs: python setup.py build_sphinx --fresh-env --warning-is-error

    # Linter commands:
    # linters: pylint straining
    # Check code formatting (PEP 8).
    linters: pycodestyle straining
    # Check documentation formatting (PEP 257).
    linters: pydocstyle straining --match='(?!test[_s]).*\.py'
    # Check order of imports.
    linters: isort --recursive --check-only --diff straining

    # Packaging commands:
    # Confirm that items checked into git are in sdist.
    packaging: check-manifest
    # Verify package metadata and confirm the long_description will render
    # correctly on PyPI.
    packaging: python setup.py check --metadata --restructuredtext --strict

    # Migrations commands:
    migrations: psql --username={env:STRAINING_POSTGRESQL_USER:straining} \
    migrations:     --host={env:STRAINING_POSTGRESQL_HOST:localhost} \
    migrations:     --port={env:STRAINING_POSTGRESQL_PORT:5432} \
    migrations:     --command='CREATE DATABASE "'{env:STRAINING_POSTGRESQL_NAME:straining}'"'
    migrations: python tests/manage.py migrate
    migrations: bash -c '[[ $(./tests/manage.py makemigrations --dry-run) = '\
    migrations:     '"No changes detected" ]] || exit 1'

[pytest]
DJANGO_SETTINGS_MODULE = tests.settings
